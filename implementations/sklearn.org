#+TITLE: implementations/sklearn

* algorithms
** [[https://scikit-learn.org/stable/modules/clustering.html][2.3. Clustering — scikit-learn 1.0.2 documentation]]

*** k-means
#+begin_quote
Given enough time, K-means will always converge, however this may be to a local minimum. This is highly dependent on the initialization of the centroids. As a result, the computation is often done several times, with different initializations of the centroids. One method to help address this issue is the k-means++ initialization scheme, which has been implemented in scikit-learn (use the =init='k-means++'= parameter). This initializes the centroids to be (generally) distant from each other, leading to probably better results than random initialization, as shown in the reference.

K-means++ can also be called independently to select seeds for other clustering algorithms, see [[https://scikit-learn.org/stable/modules/generated/sklearn.cluster.kmeans_plusplus.html#sklearn.cluster.kmeans_plusplus][=sklearn.cluster.kmeans_plusplus=]] for details and example usage.
#+end_quote

**** supports sample weights
#+begin_quote
Sample weights can be given by a parameter =sample_weight=. This allows to assign more weight to some samples when computing cluster centers and values of inertia.
#+end_quote

**** performance
***** mini batch k-means

***** =KMeans= benefits from OpenMP based parallelism through Cython. Small chunks of data (256 samples) are processed in parallel, which in addition yields a low memory footprint. For more details on how to control the number of threads, please refer to our [[https://scikit-learn.org/stable/computing/parallelism.html#parallelism][Parallelism]] notes.

* [[https://scikit-learn.org/stable/faq.html#will-you-add-gpu-support][GPUs are not supported in the sklearn library itself]]

** third-party sklearn-compatible packages
*** GPU-accelerated HDBSCAN in cuML
**** [[https://developer.nvidia.com/blog/gpu-accelerated-hierarchical-dbscan-with-rapids-cuml-lets-get-back-to-the-future/][GPU-Accelerated Hierarchical DBSCAN with RAPIDS cuML – Let’s Get Back To The Future | NVIDIA Developer Blog]]

#+ATTR_HTML: :width 472
[[file:sklearn.org_imgs/20220116_160021_X6MJtC.png]]
