#+TITLE: implementations/sklearn

* algorithms
** [[https://scikit-learn.org/stable/modules/clustering.html][2.3. Clustering — scikit-learn 1.0.2 documentation]]

*** k-means
#+begin_quote
Given enough time, K-means will always converge, however this may be to a local minimum. This is highly dependent on the initialization of the centroids. As a result, the computation is often done several times, with different initializations of the centroids. One method to help address this issue is the k-means++ initialization scheme, which has been implemented in scikit-learn (use the =init='k-means++'= parameter). This initializes the centroids to be (generally) distant from each other, leading to probably better results than random initialization, as shown in the reference.

K-means++ can also be called independently to select seeds for other clustering algorithms, see [[https://scikit-learn.org/stable/modules/generated/sklearn.cluster.kmeans_plusplus.html#sklearn.cluster.kmeans_plusplus][=sklearn.cluster.kmeans_plusplus=]] for details and example usage.
#+end_quote

**** supports sample weights
#+begin_quote
Sample weights can be given by a parameter =sample_weight=. This allows to assign more weight to some samples when computing cluster centers and values of inertia.
#+end_quote

**** performance
***** =KMeans= benefits from OpenMP based parallelism through Cython. Small chunks of data (256 samples) are processed in parallel, which in addition yields a low memory footprint. For more details on how to control the number of threads, please refer to our [[https://scikit-learn.org/stable/computing/parallelism.html#parallelism][Parallelism]] notes.

**** variants
***** mini batch k-means

***** [[https://github.com/gittar/breathing-k-means][GitHub - gittar/breathing-k-means: The "breathing k-means" algorithm with datasets and example notebooks]]
- [[https://github.com/gittar/bkmeans][GitHub - gittar/bkmeans: The breathing k-means algorithm (just one source file containing the algorithm as found on pypi)]]

- @forked [[https://github.com/NightMachinary/bkmeans][GitHub - NightMachinary/bkmeans: The breathing k-means algorithm (just one source file containing the algorithm as found on pypi)]]

#+begin_quote
An approximation algorithm for the k-means problem that (on average) is better (higher solution quality) and faster (lower CPU time usage) than k-means++.
#+end_quote

#+begin_quote
The included class *BKMeans* is subclassed from [[https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html][scikit-learn's *KMeans* class]] and has, therefore, *the same API*. It can be used as a plug-in replacement for scikit-learn's *KMeans*.

There is one new parameters which can be ignored (left at default) for normal usage:

- /m/ (breathing depth), default: 5

The parameter /m/ can also be used, however, to generate faster ( 1 < /m/ < 5) or better (/m/>5) solutions.
#+end_quote

* out-of-core
** [[https://scikit-learn.org/stable/computing/scaling_strategies.html][8.1. Strategies to scale computationally: bigger data — scikit-learn 1.0.2 documentation]]

* [[https://scikit-learn.org/stable/faq.html#will-you-add-gpu-support][GPUs are not supported in the sklearn library itself]]

** third-party sklearn-compatible packages
*** [[file:./RAPIDS.org]]

*** [[https://github.com/lebedov/scikit-cuda][GitHub - lebedov/scikit-cuda: Python interface to GPU-powered libraries]]

*** =h2o4gpu=
**** [[https://docs.h2o.ai/h2o4gpu/latest-stable/h2o4gpu-py-docs/html/_modules/h2o4gpu/solvers/kmeans.html][h2o4gpu.solvers.kmeans — H2O4GPU 0.3.2 documentation]]

*** [[https://intelpython.github.io/daal4py/algorithms.html][Algorithms — daal4py 2021.1 documentation]]
**** [[https://intelpython.github.io/daal4py/algorithms.html#k-means-clustering][k-means]]

**** [[https://intelpython.github.io/daal4py/algorithms.html#density-based-spatial-clustering-of-applications-with-noise][DBSCAN]]
