#+TITLE: data/generation

* [[http://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_blobs.html][sklearn.datasets.make_blobs â€” scikit-learn 1.0.2 documentation]]
#+begin_quote
Generate isotropic Gaussian blobs for clustering.

Parameters
n_samples : int or array-like, optional (default=100)
    If int, it is the total number of points equally divided among clusters. If array-like, each element of the sequence indicates the number of samples per cluster.

n_features : int, optional (default=2)
    The number of features for each sample.

centers : int or array of shape [n_centers, n_features], optional
    (default=None) The number of centers to generate, or the fixed center locations. If n_samples is an int and centers is None, 3 centers are generated. If n_samples is array-like, centers must be either None or an array of length equal to the length of n_samples.

cluster_std : float or sequence of floats, optional (default=1.0)
    The standard deviation of the clusters.

center_box : pair of floats (min, max), optional (default=(-10.0, 10.0))
    The bounding box for each cluster center when centers are generated at random.

shuffle : boolean, optional (default=True)
    Shuffle the samples.

random_state : int, RandomState instance or None (default)
    Determines random number generation for dataset creation. Pass an int for reproducible output across multiple function calls. See Glossary <random_state>.

Returns
X : array of shape [n_samples, n_features]
    The generated samples.

y : array of shape [n_samples]
    The integer labels for cluster membership of each sample.
#+end_quote

** @GPU
#+begin_example python
from dask.distributed import Client, wait
from dask_cuda import LocalCUDACluster

cluster = LocalCUDACluster()
client = Client(cluster)

from cuml.dask.datasets import make_blobs

nrows = 6
ncols = 3
n_parts = 2

X_cudf, _ = make_blobs(nrows, ncols, 1, n_parts,
                cluster_std=0.01,
                verbose=cuml.logger.level_info,
                random_state=10, dtype=np.float32)

wait(X_cudf)

print("Input Matrix")
print(X_cudf.compute())
#+end_example
