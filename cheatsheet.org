#+TITLE: soal_playground/cheatsheet

* FCPS
** run
#+begin_example zsh
python run_one.py 'hdbscan_sklearn_best' fcps_atom
#+end_example

#+begin_example zsh
python run_one.py 'kmeans_mb2e7_sklearn_iter10e4' 'fcps_twodiamonds'
#+end_example

#+begin_example zsh
python run_one.py 'spectral_dask_est1' 'blobs_sk' 10000 10000 10
#+end_example

** load
#+begin_example python
import rdata
from pynight.common_iterable import get_or_none

fcps_dir = get_or_none(os.environ, 'fcps_dir') or f'{os.environ["HOME"]}/Base/_Code/misc/FCPS'

ds_name = 'Leukemia'

parsed = rdata.parser.parse_file(f'{fcps_dir}/data/{ds_name}.rda')
converted = rdata.conversion.convert(parsed)
distance_mat = get_or_none(converted[ds_name], 'DistanceMatrix')
X = get_or_none(converted[ds_name], 'Data')
if X is None:
    X = distance_mat

y = converted[ds_name]['Cls']

X_np = X.to_numpy()

converted
#+end_example


* logs
#+begin_example zsh
cat ${bench_dir}/fcps_twodiamonds/hdbscan/hdbscan_cuml/out

cat ${bench_dir}/fcps_atom/hdbscan/hdbscan_cuml/out

cat ${bench_dir}/fcps_leukemia/hdbscan/hdbscan_sklearn_best_nodist/out

cat ${bench_dir}/fcps_atom/kmeans/kmeans_cuml_iter10e4/out

rm -r -- "${bench_dir}/blobs_10e5_10e4/hdbscan/hdbscan_sklearn_best_nodist/time_stats"

rm -- "${bench_dir}"/**/*spectral_sklearn*/**/completed
#+end_example

** monitor
:PROPERTIES:
:ID:       0cfe5ded-80ea-40dc-bf58-81b904edb73c
:END:
#+begin_example
emacs_init="$(<<"EOF"
;;;
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  ;; from purcell/emacs.d
  (if (package-installed-p package min-version)
      t
    (if (or (assoc package package-archive-contents) no-refresh)
        (package-install package)
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))

(package-initialize)
;;;
(require-package 'evil)
(evil-mode t)
;;;
(global-auto-revert-mode 1)
;;;
EOF
)"
local emacs_init_file=~/emacs.tmp.el
print -r -- "${emacs_init}" > "${emacs_init_file}"

a=("${save_dir}/logs/"*/benchmarks.txt(om)) && emacs27 -q -nw --load="${emacs_init_file}" ${a[1]}
# --eval "${emacs_init}"
#+end_example

#+begin_example zsh
a=("${save_dir}/logs/"*/benchmarks.txt(om)) && vim ${a[1]}
#+end_example

#+begin_quote
=oc= specifies how the names of the files should be sorted. If  c  is  n they  are  sorted  by name; if it is L they are sorted depending on the size (length) of the files; if l they are sorted by the  number of  links;  if  a,  m, or c they are sorted by the time of the last access, modification, or inode change respectively; if d, files  in subdirectories appear before those in the current directory at each level of the search -- this is best combined with  other  criteria, for  example  `odon'  to  sort  on  names for files within the same directory; if N, no sorting is performed.  Note that a,  m,  and  c compare  the  age against the current time, hence the first name in the list is the youngest file. Also note that the modifiers ^ and - are  used,  so  `*(^-oL)'  gives a list of all files sorted by file size in descending order, following any symbolic links.  Unless  oN is used, multiple order specifiers may occur to resolve ties.
#+end_quote
